#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
·ª®ng d·ª•ng GUI th·ª±c h√†nh Python c∆° b·∫£n
Giao di·ªán desktop v·ªõi tkinter
"""

import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext
import random
import json
import os
from datetime import datetime

class Student:
    def __init__(self, name, age, scores=None):
        self.name = name
        self.age = age
        self.scores = scores or []
    
    def add_score(self, score):
        self.scores.append(score)
    
    def get_average(self):
        return sum(self.scores) / len(self.scores) if self.scores else 0
    
    def info(self):
        return f"T√™n: {self.name}, Tu·ªïi: {self.age}, ƒêi·ªÉm TB: {self.get_average():.1f}"

class PythonPracticeGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("üêç ·ª®ng d·ª•ng th·ª±c h√†nh Python c∆° b·∫£n")
        self.root.geometry("800x600")
        self.root.configure(bg='#f0f0f0')
        
        # Set window icon
        try:
            self.root.iconbitmap(default='python_icon.ico')
        except:
            pass  # Icon file not found, continue without icon
        
        self.students = []
        self.data_file = "students_data.json"
        self.load_data()
        
        self.create_widgets()
    
    def create_widgets(self):
        # Header
        header_frame = tk.Frame(self.root, bg='#2c3e50', height=80)
        header_frame.pack(fill='x', padx=10, pady=5)
        header_frame.pack_propagate(False)
        
        title_label = tk.Label(header_frame, text="üêç TH·ª∞C H√ÄNH PYTHON C∆† B·∫¢N", 
                              font=('Arial', 18, 'bold'), fg='white', bg='#2c3e50')
        title_label.pack(expand=True)
        
        # Main content
        main_frame = tk.Frame(self.root, bg='#f0f0f0')
        main_frame.pack(fill='both', expand=True, padx=10, pady=5)
        
        # Left panel - Menu
        left_frame = tk.Frame(main_frame, bg='#ecf0f1', width=250)
        left_frame.pack(side='left', fill='y', padx=(0, 10))
        left_frame.pack_propagate(False)
        
        menu_label = tk.Label(left_frame, text="CH·ªåN B√ÄI T·∫¨P", font=('Arial', 12, 'bold'), 
                             bg='#ecf0f1', fg='#2c3e50')
        menu_label.pack(pady=10)
        
        # Menu buttons
        buttons = [
            ("1. Bi·∫øn & Ki·ªÉu d·ªØ li·ªáu", self.show_variables_frame),
            ("2. To√°n t·ª≠", self.show_operators_frame),
            ("3. ƒêi·ªÅu ki·ªán", self.show_conditions_frame),
            ("4. V√≤ng l·∫∑p", self.show_loops_frame),
            ("5. H√†m", self.show_functions_frame),
            ("6. C·∫•u tr√∫c d·ªØ li·ªáu", self.show_datastructures_frame),
            ("7. File", self.show_file_frame),
            ("8. OOP", self.show_oop_frame),
            ("9. Danh s√°ch HS", self.show_students_list)
        ]
        
        for text, command in buttons:
            btn = tk.Button(left_frame, text=text, command=command, 
                           font=('Arial', 10), width=20, height=2,
                           bg='#3498db', fg='white', relief='flat')
            btn.pack(pady=2, padx=10, fill='x')
        
        # Right panel - Content
        self.content_frame = tk.Frame(main_frame, bg='white', relief='sunken', bd=1)
        self.content_frame.pack(side='right', fill='both', expand=True)
        
        # Welcome screen
        self.show_welcome()
    
    def clear_content(self):
        for widget in self.content_frame.winfo_children():
            widget.destroy()
    
    def show_welcome(self):
        self.clear_content()
        welcome_label = tk.Label(self.content_frame, 
                                text="Ch√†o m·ª´ng ƒë·∫øn v·ªõi ·ª©ng d·ª•ng th·ª±c h√†nh Python!\n\nCh·ªçn m·ªôt b√†i t·∫≠p t·ª´ menu b√™n tr√°i ƒë·ªÉ b·∫Øt ƒë·∫ßu.",
                                font=('Arial', 14), bg='white', fg='#2c3e50')
        welcome_label.pack(expand=True)
    
    def show_variables_frame(self):
        self.clear_content()
        
        tk.Label(self.content_frame, text="B√ÄI T·∫¨P 1: BI·∫æN V√Ä KI·ªÇU D·ªÆ LI·ªÜU", 
                font=('Arial', 14, 'bold'), bg='white').pack(pady=10)
        
        # Input fields
        fields_frame = tk.Frame(self.content_frame, bg='white')
        fields_frame.pack(pady=10)
        
        tk.Label(fields_frame, text="T√™n:", bg='white').grid(row=0, column=0, sticky='w', padx=5, pady=5)
        name_entry = tk.Entry(fields_frame, width=20)
        name_entry.grid(row=0, column=1, padx=5, pady=5)
        
        tk.Label(fields_frame, text="Tu·ªïi:", bg='white').grid(row=1, column=0, sticky='w', padx=5, pady=5)
        age_entry = tk.Entry(fields_frame, width=20)
        age_entry.grid(row=1, column=1, padx=5, pady=5)
        
        tk.Label(fields_frame, text="Chi·ªÅu cao (m):", bg='white').grid(row=2, column=0, sticky='w', padx=5, pady=5)
        height_entry = tk.Entry(fields_frame, width=20)
        height_entry.grid(row=2, column=1, padx=5, pady=5)
        
        is_student_var = tk.BooleanVar()
        tk.Checkbutton(fields_frame, text="L√† h·ªçc sinh", variable=is_student_var, bg='white').grid(row=3, column=0, columnspan=2, pady=5)
        
        # Result area
        result_text = scrolledtext.ScrolledText(self.content_frame, width=50, height=10)
        result_text.pack(pady=10, padx=20, fill='both', expand=True)
        
        def analyze_data():
            try:
                name = name_entry.get()
                age = int(age_entry.get())
                height = float(height_entry.get())
                is_student = is_student_var.get()
                
                scores = [random.uniform(7, 10) for _ in range(3)]
                
                info = {
                    "name": name,
                    "age": age,
                    "height": height,
                    "is_student": is_student,
                    "scores": scores
                }
                
                result = f"PH√ÇN T√çCH KI·ªÇU D·ªÆ LI·ªÜU:\n\n"
                result += f"T√™n: {info['name']} (ki·ªÉu: {type(info['name']).__name__})\n"
                result += f"Tu·ªïi: {info['age']} (ki·ªÉu: {type(info['age']).__name__})\n"
                result += f"Chi·ªÅu cao: {info['height']}m (ki·ªÉu: {type(info['height']).__name__})\n"
                result += f"L√† h·ªçc sinh: {info['is_student']} (ki·ªÉu: {type(info['is_student']).__name__})\n"
                result += f"ƒêi·ªÉm s·ªë: {info['scores']} (ki·ªÉu: {type(info['scores']).__name__})\n\n"
                result += f"ƒêi·ªÉm trung b√¨nh: {sum(scores)/len(scores):.2f}\n"
                
                result_text.delete(1.0, tk.END)
                result_text.insert(tk.END, result)
                
            except ValueError:
                messagebox.showerror("L·ªói", "Vui l√≤ng nh·∫≠p ƒë√∫ng ƒë·ªãnh d·∫°ng s·ªë!")
        
        tk.Button(self.content_frame, text="Ph√¢n t√≠ch d·ªØ li·ªáu", command=analyze_data,
                 bg='#27ae60', fg='white', font=('Arial', 10, 'bold')).pack(pady=5)
    
    def show_operators_frame(self):
        self.clear_content()
        
        tk.Label(self.content_frame, text="B√ÄI T·∫¨P 2: TO√ÅN T·ª¨", 
                font=('Arial', 14, 'bold'), bg='white').pack(pady=10)
        
        input_frame = tk.Frame(self.content_frame, bg='white')
        input_frame.pack(pady=10)
        
        tk.Label(input_frame, text="S·ªë th·ª© nh·∫•t:", bg='white').grid(row=0, column=0, padx=5, pady=5)
        a_entry = tk.Entry(input_frame, width=15)
        a_entry.grid(row=0, column=1, padx=5, pady=5)
        
        tk.Label(input_frame, text="S·ªë th·ª© hai:", bg='white').grid(row=0, column=2, padx=5, pady=5)
        b_entry = tk.Entry(input_frame, width=15)
        b_entry.grid(row=0, column=3, padx=5, pady=5)
        
        result_text = scrolledtext.ScrolledText(self.content_frame, width=50, height=15)
        result_text.pack(pady=10, padx=20, fill='both', expand=True)
        
        def calculate():
            try:
                a = int(a_entry.get())
                b = int(b_entry.get())
                
                result = f"K·∫æT QU·∫¢ T√çNH TO√ÅN:\n\n"
                result += f"Ph√©p to√°n c∆° b·∫£n:\n"
                result += f"{a} + {b} = {a + b}\n"
                result += f"{a} - {b} = {a - b}\n"
                result += f"{a} * {b} = {a * b}\n"
                result += f"{a} / {b} = {a / b:.2f}\n" if b != 0 else f"{a} / {b} = Kh√¥ng th·ªÉ chia cho 0\n"
                result += f"{a} // {b} = {a // b}\n" if b != 0 else f"{a} // {b} = Kh√¥ng th·ªÉ chia cho 0\n"
                result += f"{a} % {b} = {a % b}\n" if b != 0 else f"{a} % {b} = Kh√¥ng th·ªÉ chia cho 0\n"
                result += f"{a} ** {b} = {a ** b}\n\n"
                
                result += f"So s√°nh:\n"
                result += f"{a} == {b}: {a == b}\n"
                result += f"{a} != {b}: {a != b}\n"
                result += f"{a} > {b}: {a > b}\n"
                result += f"{a} < {b}: {a < b}\n"
                result += f"{a} >= {b}: {a >= b}\n"
                result += f"{a} <= {b}: {a <= b}\n\n"
                
                result += f"Logic:\n"
                result += f"{a} > 0 and {b} > 0: {a > 0 and b > 0}\n"
                result += f"{a} > 0 or {b} > 0: {a > 0 or b > 0}\n"
                result += f"not ({a} > {b}): {not (a > b)}\n"
                
                result_text.delete(1.0, tk.END)
                result_text.insert(tk.END, result)
                
            except ValueError:
                messagebox.showerror("L·ªói", "Vui l√≤ng nh·∫≠p s·ªë nguy√™n!")
        
        tk.Button(self.content_frame, text="T√≠nh to√°n", command=calculate,
                 bg='#e74c3c', fg='white', font=('Arial', 10, 'bold')).pack(pady=5)
    
    def show_conditions_frame(self):
        self.clear_content()
        
        tk.Label(self.content_frame, text="B√ÄI T·∫¨P 3: C·∫§U TR√öC ƒêI·ªÄU KI·ªÜN", 
                font=('Arial', 14, 'bold'), bg='white').pack(pady=10)
        
        input_frame = tk.Frame(self.content_frame, bg='white')
        input_frame.pack(pady=10)
        
        tk.Label(input_frame, text="ƒêi·ªÉm s·ªë (0-10):", bg='white').grid(row=0, column=0, padx=5, pady=5)
        score_entry = tk.Entry(input_frame, width=15)
        score_entry.grid(row=0, column=1, padx=5, pady=5)
        
        tk.Label(input_frame, text="NƒÉm:", bg='white').grid(row=1, column=0, padx=5, pady=5)
        year_entry = tk.Entry(input_frame, width=15)
        year_entry.grid(row=1, column=1, padx=5, pady=5)
        
        result_text = scrolledtext.ScrolledText(self.content_frame, width=50, height=10)
        result_text.pack(pady=10, padx=20, fill='both', expand=True)
        
        def check_conditions():
            try:
                score = float(score_entry.get())
                year = int(year_entry.get())
                
                # X·∫øp lo·∫°i ƒëi·ªÉm
                if score >= 9:
                    grade = "Xu·∫•t s·∫Øc"
                elif score >= 8:
                    grade = "Gi·ªèi"
                elif score >= 6.5:
                    grade = "Kh√°"
                elif score >= 5:
                    grade = "Trung b√¨nh"
                else:
                    grade = "Y·∫øu"
                
                # Ki·ªÉm tra nƒÉm nhu·∫≠n
                is_leap = (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0)
                
                result = f"K·∫æT QU·∫¢ KI·ªÇM TRA:\n\n"
                result += f"ƒêi·ªÉm {score} x·∫øp lo·∫°i: {grade}\n\n"
                result += f"NƒÉm {year}: {'NƒÉm nhu·∫≠n' if is_leap else 'Kh√¥ng ph·∫£i nƒÉm nhu·∫≠n'}\n\n"
                
                # Th√™m logic ph√¢n lo·∫°i tu·ªïi
                if score >= 8:
                    result += "Nh·∫≠n x√©t: H·ªçc sinh gi·ªèi, c·∫ßn duy tr√¨!\n"
                elif score >= 6.5:
                    result += "Nh·∫≠n x√©t: C·∫ßn c·ªë g·∫Øng th√™m ƒë·ªÉ ƒë·∫°t lo·∫°i gi·ªèi!\n"
                else:
                    result += "Nh·∫≠n x√©t: C·∫ßn h·ªçc t·∫≠p chƒÉm ch·ªâ h∆°n!\n"
                
                result_text.delete(1.0, tk.END)
                result_text.insert(tk.END, result)
                
            except ValueError:
                messagebox.showerror("L·ªói", "Vui l√≤ng nh·∫≠p ƒë√∫ng ƒë·ªãnh d·∫°ng!")
        
        tk.Button(self.content_frame, text="Ki·ªÉm tra", command=check_conditions,
                 bg='#f39c12', fg='white', font=('Arial', 10, 'bold')).pack(pady=5)
    
    def show_loops_frame(self):
        self.clear_content()
        
        tk.Label(self.content_frame, text="B√ÄI T·∫¨P 4: V√íNG L·∫∂P", 
                font=('Arial', 14, 'bold'), bg='white').pack(pady=10)
        
        # B·∫£ng c·ª≠u ch∆∞∆°ng
        table_frame = tk.Frame(self.content_frame, bg='white')
        table_frame.pack(pady=10)
        
        tk.Label(table_frame, text="B·∫£ng c·ª≠u ch∆∞∆°ng:", bg='white').grid(row=0, column=0, padx=5, pady=5)
        table_entry = tk.Entry(table_frame, width=10)
        table_entry.grid(row=0, column=1, padx=5, pady=5)
        
        # Game ƒëo√°n s·ªë
        game_frame = tk.Frame(self.content_frame, bg='white')
        game_frame.pack(pady=10)
        
        tk.Label(game_frame, text="Game ƒëo√°n s·ªë (1-100):", bg='white').grid(row=0, column=0, padx=5, pady=5)
        guess_entry = tk.Entry(game_frame, width=10)
        guess_entry.grid(row=0, column=1, padx=5, pady=5)
        
        result_text = scrolledtext.ScrolledText(self.content_frame, width=50, height=15)
        result_text.pack(pady=10, padx=20, fill='both', expand=True)
        
        self.secret_number = random.randint(1, 100)
        self.attempts = 0
        
        def show_multiplication_table():
            try:
                n = int(table_entry.get())
                result = f"B·∫¢NG C·ª¨U CH∆Ø∆†NG {n}:\n\n"
                for i in range(1, 11):
                    result += f"{n} x {i} = {n * i}\n"
                
                result_text.delete(1.0, tk.END)
                result_text.insert(tk.END, result)
                
            except ValueError:
                messagebox.showerror("L·ªói", "Vui l√≤ng nh·∫≠p s·ªë nguy√™n!")
        
        def guess_number():
            try:
                guess = int(guess_entry.get())
                self.attempts += 1
                
                current_text = result_text.get(1.0, tk.END)
                
                if guess == self.secret_number:
                    result = f"üéâ Ch√≠nh x√°c! S·ªë b√≠ m·∫≠t l√† {self.secret_number}\n"
                    result += f"B·∫°n ƒë√£ ƒëo√°n ƒë√∫ng sau {self.attempts} l·∫ßn th·ª≠!\n\n"
                    # Reset game
                    self.secret_number = random.randint(1, 100)
                    self.attempts = 0
                    result += "Game m·ªõi ƒë√£ b·∫Øt ƒë·∫ßu!\n"
                elif guess < self.secret_number:
                    result = f"L·∫ßn th·ª≠ {self.attempts}: {guess} - S·ªë c·∫ßn t√¨m L·ªöN H∆†N!\n"
                else:
                    result = f"L·∫ßn th·ª≠ {self.attempts}: {guess} - S·ªë c·∫ßn t√¨m NH·ªé H∆†N!\n"
                
                result_text.insert(tk.END, result)
                result_text.see(tk.END)
                guess_entry.delete(0, tk.END)
                
            except ValueError:
                messagebox.showerror("L·ªói", "Vui l√≤ng nh·∫≠p s·ªë nguy√™n!")
        
        btn_frame = tk.Frame(self.content_frame, bg='white')
        btn_frame.pack(pady=5)
        
        tk.Button(btn_frame, text="Hi·ªán b·∫£ng c·ª≠u ch∆∞∆°ng", command=show_multiplication_table,
                 bg='#9b59b6', fg='white', font=('Arial', 10, 'bold')).pack(side='left', padx=5)
        
        tk.Button(btn_frame, text="ƒêo√°n s·ªë", command=guess_number,
                 bg='#1abc9c', fg='white', font=('Arial', 10, 'bold')).pack(side='left', padx=5)
    
    def show_functions_frame(self):
        self.clear_content()
        
        tk.Label(self.content_frame, text="B√ÄI T·∫¨P 5: H√ÄM", 
                font=('Arial', 14, 'bold'), bg='white').pack(pady=10)
        
        input_frame = tk.Frame(self.content_frame, bg='white')
        input_frame.pack(pady=10)
        
        tk.Label(input_frame, text="C√¢n n·∫∑ng (kg):", bg='white').grid(row=0, column=0, padx=5, pady=5)
        weight_entry = tk.Entry(input_frame, width=15)
        weight_entry.grid(row=0, column=1, padx=5, pady=5)
        
        tk.Label(input_frame, text="Chi·ªÅu cao (m):", bg='white').grid(row=0, column=2, padx=5, pady=5)
        height_entry = tk.Entry(input_frame, width=15)
        height_entry.grid(row=0, column=3, padx=5, pady=5)
        
        tk.Label(input_frame, text="Fibonacci n:", bg='white').grid(row=1, column=0, padx=5, pady=5)
        fib_entry = tk.Entry(input_frame, width=15)
        fib_entry.grid(row=1, column=1, padx=5, pady=5)
        
        result_text = scrolledtext.ScrolledText(self.content_frame, width=50, height=12)
        result_text.pack(pady=10, padx=20, fill='both', expand=True)
        
        def calculate_bmi(weight, height):
            return weight / (height ** 2)
        
        def bmi_category(bmi):
            if bmi < 18.5:
                return "G·∫ßy"
            elif bmi < 25:
                return "B√¨nh th∆∞·ªùng"
            elif bmi < 30:
                return "Th·ª´a c√¢n"
            else:
                return "B√©o ph√¨"
        
        def fibonacci(n):
            if n <= 1:
                return n
            a, b = 0, 1
            for _ in range(2, n + 1):
                a, b = b, a + b
            return b
        
        def calculate_all():
            try:
                result = "K·∫æT QU·∫¢ T√çNH TO√ÅN:\n\n"
                
                # BMI
                if weight_entry.get() and height_entry.get():
                    weight = float(weight_entry.get())
                    height = float(height_entry.get())
                    bmi = calculate_bmi(weight, height)
                    category = bmi_category(bmi)
                    result += f"BMI: {bmi:.1f} - {category}\n\n"
                
                # Fibonacci
                if fib_entry.get():
                    n = int(fib_entry.get())
                    if n >= 0:
                        fib_result = fibonacci(n)
                        result += f"Fibonacci({n}) = {fib_result}\n\n"
                        
                        # Hi·ªÉn th·ªã d√£y Fibonacci
                        result += f"D√£y Fibonacci ƒë·∫øn {n}:\n"
                        fib_sequence = [fibonacci(i) for i in range(min(n + 1, 20))]
                        result += ", ".join(map(str, fib_sequence))
                        if n > 19:
                            result += "..."
                        result += "\n"
                
                result_text.delete(1.0, tk.END)
                result_text.insert(tk.END, result)
                
            except ValueError:
                messagebox.showerror("L·ªói", "Vui l√≤ng nh·∫≠p ƒë√∫ng ƒë·ªãnh d·∫°ng s·ªë!")
        
        tk.Button(self.content_frame, text="T√≠nh to√°n", command=calculate_all,
                 bg='#34495e', fg='white', font=('Arial', 10, 'bold')).pack(pady=5)
    
    def show_datastructures_frame(self):
        self.clear_content()
        
        tk.Label(self.content_frame, text="B√ÄI T·∫¨P 6: C·∫§U TR√öC D·ªÆ LI·ªÜU", 
                font=('Arial', 14, 'bold'), bg='white').pack(pady=10)
        
        input_frame = tk.Frame(self.content_frame, bg='white')
        input_frame.pack(pady=10)
        
        tk.Label(input_frame, text="Nh·∫≠p danh s√°ch (c√°ch nhau b·ªüi d·∫•u ph·∫©y):", bg='white').pack()
        list_entry = tk.Entry(input_frame, width=50)
        list_entry.pack(pady=5)
        
        result_text = scrolledtext.ScrolledText(self.content_frame, width=50, height=15)
        result_text.pack(pady=10, padx=20, fill='both', expand=True)
        
        def analyze_data_structures():
            try:
                input_text = list_entry.get()
                if not input_text:
                    messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng nh·∫≠p d·ªØ li·ªáu!")
                    return
                
                # T·∫°o list t·ª´ input
                items = [item.strip() for item in input_text.split(',')]
                
                result = "PH√ÇN T√çCH C·∫§U TR√öC D·ªÆ LI·ªÜU:\n\n"
                
                # List
                result += f"1. LIST:\n"
                result += f"   D·ªØ li·ªáu g·ªëc: {items}\n"
                result += f"   S·ªë ph·∫ßn t·ª≠: {len(items)}\n"
                result += f"   Ph·∫ßn t·ª≠ ƒë·∫ßu: {items[0] if items else 'Kh√¥ng c√≥'}\n"
                result += f"   Ph·∫ßn t·ª≠ cu·ªëi: {items[-1] if items else 'Kh√¥ng c√≥'}\n\n"
                
                # Set (lo·∫°i b·ªè tr√πng l·∫∑p)
                unique_items = list(set(items))
                result += f"2. SET (lo·∫°i b·ªè tr√πng l·∫∑p):\n"
                result += f"   D·ªØ li·ªáu: {unique_items}\n"
                result += f"   S·ªë ph·∫ßn t·ª≠ duy nh·∫•t: {len(unique_items)}\n\n"
                
                # Dictionary (ƒë·∫øm s·ªë l·∫ßn xu·∫•t hi·ªán)
                count_dict = {}
                for item in items:
                    count_dict[item] = count_dict.get(item, 0) + 1
                
                result += f"3. DICTIONARY (ƒë·∫øm s·ªë l·∫ßn xu·∫•t hi·ªán):\n"
                for key, value in count_dict.items():
                    result += f"   '{key}': {value} l·∫ßn\n"
                result += "\n"
                
                # Tuple
                items_tuple = tuple(items)
                result += f"4. TUPLE:\n"
                result += f"   D·ªØ li·ªáu: {items_tuple}\n"
                result += f"   Kh√¥ng th·ªÉ thay ƒë·ªïi sau khi t·∫°o\n\n"
                
                # Thao t√°c v·ªõi list
                result += f"5. THAO T√ÅC V·ªöI LIST:\n"
                if len(items) > 1:
                    result += f"   S·∫Øp x·∫øp: {sorted(items)}\n"
                    result += f"   ƒê·∫£o ng∆∞·ª£c: {items[::-1]}\n"
                
                result_text.delete(1.0, tk.END)
                result_text.insert(tk.END, result)
                
            except Exception as e:
                messagebox.showerror("L·ªói", f"C√≥ l·ªói x·∫£y ra: {str(e)}")
        
        tk.Button(self.content_frame, text="Ph√¢n t√≠ch", command=analyze_data_structures,
                 bg='#16a085', fg='white', font=('Arial', 10, 'bold')).pack(pady=5)
    
    def show_file_frame(self):
        self.clear_content()
        
        tk.Label(self.content_frame, text="B√ÄI T·∫¨P 7: X·ª¨ L√ù FILE", 
                font=('Arial', 14, 'bold'), bg='white').pack(pady=10)
        
        input_frame = tk.Frame(self.content_frame, bg='white')
        input_frame.pack(pady=10)
        
        tk.Label(input_frame, text="Nh·∫≠p ghi ch√∫:", bg='white').pack()
        note_entry = tk.Entry(input_frame, width=50)
        note_entry.pack(pady=5)
        
        result_text = scrolledtext.ScrolledText(self.content_frame, width=50, height=15)
        result_text.pack(pady=10, padx=20, fill='both', expand=True)
        
        filename = "practice_notes.txt"
        
        def save_note():
            note = note_entry.get()
            if not note:
                messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng nh·∫≠p ghi ch√∫!")
                return
            
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            
            try:
                with open(filename, 'a', encoding='utf-8') as f:
                    f.write(f"[{timestamp}] {note}\n")
                
                messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ l∆∞u ghi ch√∫ v√†o {filename}")
                note_entry.delete(0, tk.END)
                load_notes()
                
            except Exception as e:
                messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ l∆∞u file: {str(e)}")
        
        def load_notes():
            try:
                if os.path.exists(filename):
                    with open(filename, 'r', encoding='utf-8') as f:
                        content = f.read()
                    
                    result_text.delete(1.0, tk.END)
                    result_text.insert(tk.END, f"N·ªòI DUNG FILE {filename}:\n\n{content}")
                else:
                    result_text.delete(1.0, tk.END)
                    result_text.insert(tk.END, f"File {filename} ch∆∞a t·ªìn t·∫°i.")
                    
            except Exception as e:
                messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ ƒë·ªçc file: {str(e)}")
        
        def clear_notes():
            try:
                if os.path.exists(filename):
                    os.remove(filename)
                    messagebox.showinfo("Th√†nh c√¥ng", "ƒê√£ x√≥a file ghi ch√∫!")
                    result_text.delete(1.0, tk.END)
                    result_text.insert(tk.END, "File ƒë√£ ƒë∆∞·ª£c x√≥a.")
            except Exception as e:
                messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ x√≥a file: {str(e)}")
        
        btn_frame = tk.Frame(self.content_frame, bg='white')
        btn_frame.pack(pady=5)
        
        tk.Button(btn_frame, text="L∆∞u ghi ch√∫", command=save_note,
                 bg='#27ae60', fg='white', font=('Arial', 10, 'bold')).pack(side='left', padx=5)
        
        tk.Button(btn_frame, text="T·∫£i ghi ch√∫", command=load_notes,
                 bg='#3498db', fg='white', font=('Arial', 10, 'bold')).pack(side='left', padx=5)
        
        tk.Button(btn_frame, text="X√≥a file", command=clear_notes,
                 bg='#e74c3c', fg='white', font=('Arial', 10, 'bold')).pack(side='left', padx=5)
        
        # Load notes on start
        load_notes()
    
    def show_oop_frame(self):
        self.clear_content()
        
        tk.Label(self.content_frame, text="B√ÄI T·∫¨P 8: L·∫¨P TR√åNH H∆Ø·ªöNG ƒê·ªêI T∆Ø·ª¢NG", 
                font=('Arial', 14, 'bold'), bg='white').pack(pady=10)
        
        input_frame = tk.Frame(self.content_frame, bg='white')
        input_frame.pack(pady=10)
        
        tk.Label(input_frame, text="T√™n h·ªçc sinh:", bg='white').grid(row=0, column=0, padx=5, pady=5)
        name_entry = tk.Entry(input_frame, width=20)
        name_entry.grid(row=0, column=1, padx=5, pady=5)
        
        tk.Label(input_frame, text="Tu·ªïi:", bg='white').grid(row=1, column=0, padx=5, pady=5)
        age_entry = tk.Entry(input_frame, width=20)
        age_entry.grid(row=1, column=1, padx=5, pady=5)
        
        tk.Label(input_frame, text="ƒêi·ªÉm (c√°ch nhau b·ªüi d·∫•u ph·∫©y):", bg='white').grid(row=2, column=0, padx=5, pady=5)
        scores_entry = tk.Entry(input_frame, width=20)
        scores_entry.grid(row=2, column=1, padx=5, pady=5)
        
        result_text = scrolledtext.ScrolledText(self.content_frame, width=50, height=12)
        result_text.pack(pady=10, padx=20, fill='both', expand=True)
        
        def create_student():
            try:
                name = name_entry.get()
                age = int(age_entry.get())
                scores_text = scores_entry.get()
                
                if not name:
                    messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng nh·∫≠p t√™n!")
                    return
                
                scores = []
                if scores_text:
                    scores = [float(score.strip()) for score in scores_text.split(',')]
                
                student = Student(name, age, scores)
                self.students.append(student)
                self.save_data()
                
                result = f"ƒê√É T·∫†O ƒê·ªêI T∆Ø·ª¢NG STUDENT:\n\n"
                result += f"Th√¥ng tin: {student.info()}\n\n"
                result += f"Thu·ªôc t√≠nh:\n"
                result += f"- name: {student.name}\n"
                result += f"- age: {student.age}\n"
                result += f"- scores: {student.scores}\n\n"
                result += f"Ph∆∞∆°ng th·ª©c:\n"
                result += f"- get_average(): {student.get_average():.2f}\n"
                result += f"- info(): {student.info()}\n\n"
                result += f"T·ªïng s·ªë h·ªçc sinh ƒë√£ t·∫°o: {len(self.students)}"
                
                result_text.delete(1.0, tk.END)
                result_text.insert(tk.END, result)
                
                # Clear inputs
                name_entry.delete(0, tk.END)
                age_entry.delete(0, tk.END)
                scores_entry.delete(0, tk.END)
                
                messagebox.showinfo("Th√†nh c√¥ng", "ƒê√£ t·∫°o v√† l∆∞u h·ªçc sinh!")
                
            except ValueError:
                messagebox.showerror("L·ªói", "Vui l√≤ng nh·∫≠p ƒë√∫ng ƒë·ªãnh d·∫°ng!")
        
        tk.Button(self.content_frame, text="T·∫°o h·ªçc sinh", command=create_student,
                 bg='#8e44ad', fg='white', font=('Arial', 10, 'bold')).pack(pady=5)
    
    def show_students_list(self):
        self.clear_content()
        
        tk.Label(self.content_frame, text="DANH S√ÅCH H·ªåC SINH", 
                font=('Arial', 14, 'bold'), bg='white').pack(pady=10)
        
        result_text = scrolledtext.ScrolledText(self.content_frame, width=50, height=20)
        result_text.pack(pady=10, padx=20, fill='both', expand=True)
        
        if not self.students:
            result_text.insert(tk.END, "Ch∆∞a c√≥ h·ªçc sinh n√†o ƒë∆∞·ª£c t·∫°o.\n\nH√£y s·ª≠ d·ª•ng b√†i t·∫≠p OOP ƒë·ªÉ t·∫°o h·ªçc sinh!")
        else:
            result = f"DANH S√ÅCH {len(self.students)} H·ªåC SINH:\n\n"
            for i, student in enumerate(self.students, 1):
                result += f"{i}. {student.info()}\n"
                result += f"   ƒêi·ªÉm chi ti·∫øt: {student.scores}\n\n"
            
            # Th·ªëng k√™
            all_scores = []
            for student in self.students:
                all_scores.extend(student.scores)
            
            if all_scores:
                result += f"TH·ªêNG K√ä:\n"
                result += f"- T·ªïng s·ªë ƒëi·ªÉm: {len(all_scores)}\n"
                result += f"- ƒêi·ªÉm cao nh·∫•t: {max(all_scores):.2f}\n"
                result += f"- ƒêi·ªÉm th·∫•p nh·∫•t: {min(all_scores):.2f}\n"
                result += f"- ƒêi·ªÉm trung b√¨nh chung: {sum(all_scores)/len(all_scores):.2f}\n"
            
            result_text.insert(tk.END, result)
        
        def clear_all_students():
            if messagebox.askyesno("X√°c nh·∫≠n", "B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a t·∫•t c·∫£ h·ªçc sinh?"):
                self.students.clear()
                self.save_data()
                self.show_students_list()
                messagebox.showinfo("Th√†nh c√¥ng", "ƒê√£ x√≥a t·∫•t c·∫£ h·ªçc sinh!")
        
        tk.Button(self.content_frame, text="X√≥a t·∫•t c·∫£", command=clear_all_students,
                 bg='#e74c3c', fg='white', font=('Arial', 10, 'bold')).pack(pady=5)
    
    def save_data(self):
        try:
            data = []
            for student in self.students:
                data.append({
                    "name": student.name,
                    "age": student.age,
                    "scores": student.scores
                })
            with open(self.data_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
        except:
            pass
    
    def load_data(self):
        if os.path.exists(self.data_file):
            try:
                with open(self.data_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    for item in data:
                        student = Student(item["name"], item["age"], item["scores"])
                        self.students.append(student)
            except:
                pass

def main():
    root = tk.Tk()
    app = PythonPracticeGUI(root)
    root.mainloop()

if __name__ == "__main__":
    main()